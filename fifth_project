style.css

* {
  margin: 0;
  padding: 0;
}

@font-face {
  font-family: 'Steppe-Book';
  src: url("./assets/fonts/Steppe-Book.ttf");
}

@font-face {
  font-family: 'Steppe-ExtraBold';
  src: url("./assets/fonts/Steppe-ExtraBold.ttf");
}

body {
  background-color: #5243F4;
  font-family: 'Steppe-Book', sans-serif;
  color: white;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
}

.button{
  background-color: white;
  border-radius: 60px;
  width: 178px;
  height: 58px;
  box-sizing: border-box;
  padding: 18px;
  text-align: center;
  font-size: 18px;
  color: #5243F4;
  border: 0;
  outline: none;
  cursor: pointer;
}

.violet-button {
  background-color: #5243F4;
  color: white;
}

.button:disabled {
  cursor: not-allowed;
  color: gray;
  background-color: #343434;
}

.button:hover:not(:disabled) {
  background-color: #eeeeee;
}

.button.violet-button:hover:not(:disabled) {
background-color: #3b2cd8;
}
.button:hover{
  background-color: #eeeeee;
}

.button.violet-button:hover{
  background-color: #3b2cd8;
}

.common-title {
  font-family: 'Steppe-ExtraBold', sans-serif;
  font-size: 60px;
  line-height: 100%;
  text-align: center;
}

app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import {ReactiveFormsModule} from "@angular/forms";

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


app.component.css

.main {
  position: relative;
  overflow: hidden;
}

.currency {
  position: fixed;
  right: 50px;
  bottom: 50px;
  border: 1px solid white;
  padding: 5px 10px;
  height: 25px;
  min-width: 25px;
  border-radius: 50px;
  text-align: center;
  cursor: pointer;
  line-height: 28px;
  z-index: 1;
  user-select: none;
  transform: scale(1);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(0.9);
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.5);
  }

  70% {
    transform: scale(1);
    box-shadow: 0 0 0 10px rgba(255, 255, 255, 0);
  }

  100% {
    transform: scale(0.9);
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
  }
}

.header {
  padding: 40px 0;
}

.header .container {
  display: flex;
  align-items: center;
}

.logo img {
  vertical-align: bottom;
}

.menu {
  margin-left: 250px;
}

.menu-list {
  list-style: none;
  display: flex;
  gap: 50px;
}

.menu-item a {
  font-size: 16px;
  line-height: 130%;
  text-decoration: none;
  cursor: pointer;
  color: white;
}

.menu-item a:hover {
  border-bottom: 2px solid white;
}

.main-content {
  padding-top: 161px;
  padding-bottom: 200px;
}

.main-info {
  max-width: 811px;
}

.main-title {
  font-family: 'Steppe-ExtraBold', sans-serif;
  font-size: 90px;
  line-height: 100%;
  margin-bottom: 20px;
}

.main-text {
  max-width: 697px;
  font-size: 18px;
  line-height: 130%;
  margin-bottom: 40px;
}

.main-image {
  position: absolute;
  top: 0;
  right: 0;
  z-index: -1;
}

.products {
  position: relative;
  padding: 100px 0;
}

.products-items {
  display: grid;
  grid-template-columns: repeat(3, 384px);
  gap: 90px 24px;
  margin-top: 110px;
}

.products-item {
  background-color: white;
  color: #5D3427;
}

.products-item-image {
  height: 202px;
  text-align: center;
}

.products-item-image img {
  height: 272px;
  top: -70px;
  position: relative;
  max-width: 100%;
}

.products-item-details {
  padding: 24px;
}

.products-item-title {
  font-family: 'Steppe-ExtraBold', sans-serif;
  font-size: 18px;
  margin-bottom: 20px;
}

.products-item-text {
  height: 110px;
  font-size: 14px;
  line-height: 120%;
  margin-bottom: 20px;
}

.products-item-extra {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.products-item-price {
  font-family: 'Steppe-ExtraBold', sans-serif;
  color: #5243F4;
  font-size: 24px;
  margin-bottom: 10px;
}

.products-item-weight {
  font-size: 12px;
}

.love {
  padding: 64px 0 150px 0;
}

.love-items {
  margin-top: 40px;
  display: flex;
  gap: 20px;
}

.love-item {
  width: 590px;
  height: 453px;
}

.love-item-white {
  background-color: white;
  padding: 110px 80px;
  box-sizing: border-box;
  color: #5D3427;
}

.love-item-title {
  font-family: 'Steppe-ExtraBold', sans-serif;
  font-size: 24px;
  line-height: 110%;
  margin-bottom: 20px;
}

.love-item-text {
  font-size: 18px;
  line-height: 130%;
}

.order {
  position: relative;
  padding-bottom: 102px;
}

.order .container {
  position: relative;
}

.order-block {
  margin-top: 103px;
  background-color: rgb(255 255 255 / 30%);
  backdrop-filter: blur(50px);
  display: flex;
}

.order-form {
  margin-left: 200px;
  max-width: 387px;
  padding: 40px 0 44px 0;
  box-sizing: border-box;
}

.order-form-text {
  font-family: 'Steppe-ExtraBold', sans-serif;
  font-size: 18px;
  line-height: 130%;
}

.order-form-inputs {
  display: flex;
  flex-direction: column;
  margin-top: 20px;
}

.order-form-inputs input {
  border: 1px solid white;
  border-radius: 60px;
  margin-bottom: 16px;
  padding: 24px 22px;
  font-size: 18px;
  width: 385px;
  height: 68px;
  background: transparent;
  box-sizing: border-box;
  outline: none;
  color: white;
}

::placeholder {
  color: rgba(255,255, 255, 0.4);
}

.order-form-inputs .button.violet-button {
  width: 387px;
  height: 71px;
}

.order-block-image {
  height: 501px;
  margin-left: 109px;
}

.order-image {
  height: 559px;
  top: -58px;
  position: relative;
}
.order-bg-image {
  position: absolute;
  top: 0;
  right: calc(100% - 810px);
  z-index: -1;
}

.footer {
  padding: 126px 0 50px 0;
  text-align: center;
}

.rights {
  margin-top: 14px;
  font-size: 18px;
  line-height: 130%;
}

.line1 {
  position: absolute;
  z-index: -1;
  top: 0;
  left: calc(100% - 960px);
}

.line2 {
  position: absolute;
  z-index: -1;
  top: -40px;
  left: 0;
}

.line3 {
  position: absolute;
  z-index: -1;
  top: -920px;
  left: 0;
}

.order-form-inputs input.error{
  border-color: red;
}

app.component.html

<main class="main">
  <div class="currency" title="Изменить валюту" id="change-currency" (click)="changeCurrency()">{{currency}}</div>
  <header class="header">
    <div class="container">
      <div class="logo">
        <img src="./assets/images/logo.png" alt="Logo">
      </div>
      <nav class="menu">
        <ul class="menu-list">
          <li class="menu-item">
            <a (click)="scrollTo(products)">Каталог</a>
          </li>
          <li class="menu-item">
            <a (click)="scrollTo(love)">О нас</a>
          </li>
          <li class="menu-item">
            <a (click)="scrollTo(order)">Оформление заказа</a>
          </li>
        </ul>
      </nav>
    </div>
  </header>

  <section class="main-content">
    <div class="container">
      <img src="./assets/images/line1.png" alt="Line" class="line1">
      <div class="main-info">
        <h1 class="main-title">Магия вкуса в каждой крошке</h1>
        <p class="main-text">
          Наши рецепты вдыхают жизнь в изысканность ингредиентов: ароматное натуральное
          масло, свежие сливки, чистый мёд и отборная мука. Мы тщательно отбираем каждый компонент
          премиального
          печенья, стремясь подарить вам истинное кулинарное наслаждение.
        </p>
        <div class="main-action">
          <button class="button" id="main-action-button" (click)="scrollTo(products)">Заказать</button>
        </div>
      </div>
      <img src="./assets/images/cookie.png" alt="Cookie" class="main-image">
    </div>
  </section>


  <section class="products" id="products" #products>
    <div class="container">
      <img src="./assets/images/line2.png" alt="line2" class="line2">
      <div class="common-title">Выберите печенье</div>
      <div class="products-items">
        <div class="products-item" *ngFor="let product of productsData">
          <div class="products-item-image">
            <img src="./assets/images/{{product.image}}" alt="Product">
          </div>
          <div class="products-item-details">
            <div class="products-item-title">{{product.title}}</div>
            <div class="products-item-text">
              {{product.text}}
            </div>
            <div class="products-item-extra">
              <div class="products-item-info">
                <div class="products-item-price">{{product.price}} {{currency}}</div>
                <div class="products-item-weight">{{product.weight}}</div>
              </div>
              <button class="button violet-button" (click)="scrollTo(order)">Заказать</button>
            </div>
          </div>
        </div>

      </div>
    </div>
  </section>
  <section class="love" id="love" #love>
    <div class="container">
      <div class="common-title">Пекарня с любовью</div>
      <div class="love-items">
        <div class="love-item love-item-white">
          <div class="love-item-title">Приготовлено с заботой, чтобы радовать вас каждый день</div>
          <div class="love-item-text">Мы с гордостью представляем наше печенье, которое мы выпекаем вручную
            каждый
            день
            с 1995 года, используя только лучшие ингредиенты. Погрузитесь в мир изысканных лакомств,
            приготовленных с применением передовых технологий, и насладитесь их неповторимым вкусом.
          </div>
        </div>
        <div class="love-item love-item-image">
          <img src="./assets/images/love.png" alt="Cookie image">
        </div>
      </div>
    </div>
  </section>

  <section class="order" id="order" #order>
    <img src="./assets/images/line3.png" alt="line3" class="line3">
    <div class="container">
      <div class="common-title">Закажите печенье</div>
      <img src="./assets/images/breadcrumbs.png" alt="breadcrumbs" class="order-bg-image">
      <div class="order-block">
        <div class="order-form">
          <div class="order-form-text">Откройте для себя волшебство вкуса с нашим премиальным печеньем!
            Закажите
            прямо сейчас и окунитесь в мир сладких наслаждений.
          </div>
          <div class="order-form-inputs" [formGroup]="form">
            <input type="text" placeholder="Выберете печеньие" id="product" formControlName="product" [class]="{'error': form.get('product')?.invalid && (form.get('product')?.dirty || form.get('product')?.touched)}" >
            <input type="text" placeholder="Ваше имя" id="name" formControlName="name" [class]="{'error': form.get('name')?.invalid && (form.get('name')?.dirty || form.get('name')?.touched)}">
            <input type="text" placeholder="Ваш телефон" id="phone" formControlName="phone" [class]="{'error': form.get('phone')?.invalid && (form.get('phone')?.dirty || form.get('phone')?.touched)}">
            <button class="button violet-button" id="order-action" (click)="confirmOrder()" [disabled]="!form.valid">Оформить заказ</button>
          </div>
        </div>
        <div class="order-block-image">
          <img src="./assets/images/order.png" alt="Cookies" class="order-image">
        </div>
      </div>
    </div>
  </section>

  <footer class="footer">
    <div class="logo">
      <img src="./assets/images/logo.png" alt="Logo">
    </div>
    <div class="rights">«Все права защищены»</div>
  </footer>
</main>

app.component.ts

import { Component } from '@angular/core';
import {FormBuilder, Validators} from "@angular/forms";

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  currency = "$";
  productsData = [
    {
      image: "1.png",
      title: "Лучшие друзья",
      text: "Печенье, с которого все началось! Наше фирменное печенье с шоколадной крошкой и грецкими орехами хрустящее снаружи с достаточно толстой и липкой серединкой.",
      price: 20,
      basePrice: 20,
      weight: "2 шт./ 200 гр.",
    },
    {
      image: "2.png",
      title: "Шоколадный француз",
      text: "Это печенье, изготовленное из тёмного французского какао и полусладкой шоколадной стружки, наверняка удовлетворит даже самого заядлого любителя шоколада.",
      price: 24,
      basePrice: 24,
      weight: "2 шт./ 200 гр.",
    },
    {
      image: "3.png",
      title: "Овсянка с изюмом, Сэр!",
      text: "Это сдобное маслянистое печенье весом шесть унций каждое, золотисто-коричневое снаружи, влажное внутри и наполненное пухлым сладким изюмом.",
      price: 18,
      basePrice: 18,
      weight: "2 шт./ 200 гр.",
    },
    {
      image: "4.png",
      title: "Шоколадное наслаждение",
      text: "Идеально хрустящее снаружи и достаточно густое и липкое в центре, это печенье наполнено полусладкой и тёмной шоколадной стружкой, придающей богатую глубину вкуса.",
      price: 24,
      basePrice: 24,
      weight: "2 шт./ 200 гр.",
    },
    {
      image: "5.png",
      title: "Арахисовый рай",
      text: "Сладкое, пикантное и идеально сбалансированное печенье удовлетворяет тягу любителей арахисового масла и шоколада.",
      price: 20,
      basePrice: 20,
      weight: "2 шт./ 200 гр.",
    },
    {
      image: "6.png",
      title: "Шоколадный ореховый деликатес",
      text: "Наша фирменная рецептура печенья с шоколадными крошками и грецкими орехами гарантирует незабываемый вкусовой опыт. Каждое печенье хрустит снаружи, но раскрывает внутри нежную сердцевину.",
      price: 18,
      basePrice: 18,
      weight: "2 шт./ 200 гр.",
    },
    {
      image: "7.png",
      title: "Ассорти фирменного печенья",
      text: "Зачем выбирать один, когда можно получить их все? Наш классический ассортимент печенья включает в себя по одному из четырёх оригинальных вкусов печенья.",
      price: 36,
      basePrice: 36,
      weight: "4 шт./ 400 гр.",
    },
    {
      image: "8.png",
      title: "Лимонное печенье",
      text: "Весна уже не за горами, но нам не терпелось подарить вам немного солнечного света: наше первое лимонное печенье. Это лакомство жевательное, лимонное, не слишком сладкое и даже немного… освежающее?",
      price: 33,
      basePrice: 33,
      weight: "4 шт./ 400 гр.",
    },
    {
      image: "9.png",
      title: "Любители шоколада",
      text: "Вам больше не нужно выбирать фаворитов. Мы сделали этот набор для всех людей, которые действительно любят шоколад…",
      price: 38,
      basePrice: 38,
      weight: "4 шт./ 400 гр.",
    },
    {
      image: "10.png",
      title: "Карамель и кокос",
      text: "Побалуйте себя кокосовым, маслянистым, карамельным печеньем, которое обладает невиданным ранее вкусом и текстурой. Наслаждение круглый год.",
      price: 33,
      basePrice: 33,
      weight: "4 шт./ 400 гр.",
    },
    {
      image: "11.png",
      title: "Веганское с шоколадной крошкой",
      text: "Наше веганское безглютеновое печенье содержит кусочки хрустящих грецких орехов и полусладкую веганскую шоколадную стружку.",
      price: 39,
      basePrice: 39,
      weight: "4 шт./ 400 гр.",
    },
    {
      image: "12.png",
      title: "Крем-брюле ореховое печенье",
      text: "Используя уникальную смесь ингредиентов, мы создали печенье с кусочками крем-брюле и миндальными орехами, которое обещает неповторимые гастрономические ощущения. Каждый кусочек обладает хрустящей корочкой и тает во рту.",
      price: 35,
      basePrice: 35,
      weight: "4 шт./ 400 гр.",
    },
  ];

  form = this.fb.group({
    product: ["", Validators.required],
    name: ["", Validators.required],
    phone: ["", Validators.required]
  });

  constructor(private fb: FormBuilder) {

  }

  scrollTo(target: HTMLElement) {
    target.scrollIntoView({behavior: "smooth"});
  }

  changeCurrency() {
    let newCurrency = "$";
    let coefficient = 1;
    if (this.currency === "$") {
      newCurrency = "₽";
      coefficient = 90;
    } else if (this.currency === "₽") {
      newCurrency = "BYN";
      coefficient = 3;
    } else if (this.currency === "BYN") {
      newCurrency = "€";
      coefficient = 0.9;
    } else if (this.currency === "€") {
      newCurrency = "¥";
      coefficient = 6.9;
    } else if (this.currency === "¥") {
      newCurrency = "JPY";
      coefficient = 0.65541;
    } else if (this.currency === "JPY") {
      newCurrency = "SEK";
      coefficient = 15.18;
    }
    this.currency = newCurrency;

    this.productsData.forEach((item: any) => {
      item.price = +(item.basePrice * coefficient).toFixed(1);

    });
  }

  confirmOrder() {
    if (this.form.valid) {
      alert("Спасибо за заказ! Мы скоро свяжемся с вами!")
      this.form.reset();
    }

  }
}

Tasc


Будьте очень внимательны!

Чтобы сделать домашнее задание, выполняйте следующие шаги:
1. Найдите в файле app.compoment.html следующий код (это первый input для заказа в форме):
<input type="text" placeholder="Выберите печенье" id="product" formControlName="product" [class]="{'error': form.get('product')?.invalid && (form.get('product')?.dirty || form.get('product')?.touched)}">
Вставьте перед последней закрывающей стрелкой > пробел и напишите атрибут readonly.
2. Найдите в этом же файле строку с кнопкой в карточке товара
<button class="button violet-button" (click)="scrollTo(order)">Заказать</button>
После слова order до закрывающей круглой скобки поставьте курсор и вставьте запятую , и через пробел параметр product. В итоге в функцию scrollTo будет передаваться 2 параметра через запятую: order, product.
3. Перейдите к файлу app.component.ts и найдите описание функции scrollTo.
Замените в строчке описания параметров функции (внутри круглых скобок)
target: HTMLElement
на
target: HTMLElement, product?: any
4. Далее найдите строчку:
target.scrollIntoView({behavior: "smooth"});
Поставьте в конце неё курсор и сделайте перенос на новую строку нажатием на Enter. Обратите внимание, что ваша новая строка должна быть ДО закрывающей функции скобки }, а не после. В новую строку вставьте следующий код:
if (product) {
  this.form.patchValue({product: product.title + ' (' + product.price + ' ' + this.currency + ')'});
}
5. Перейдите в Command Prompt (Terminal) и убедитесь, что сборка проекта успешно перезапустилась автоматически и там нет ошибок.
6. Вернитесь на сайт и обновите страницу (желательно через Ctrl+Shift+R для сброса кэша). Пробуйте нажимать на кнопку Выбрать в разных карточках с товарами и проверьте, добавляется ли название товара и актуальная цена по текущей валюте в поле формы. Если нет – проверьте правильно ли вы изменили код по заданию. Всё нужно делать строго так, как написано выше.
7. Остановите проект в Command Prompt (Terminal) через Ctrl + C, удалите в проекте папки node_modules и .angular, создайте архив на основе оставшихся папок и файлов, загрузите на хранилище, создайте доступ по ссылке и отправьте ссылку нам на проверку.
